/*
* generated by Xtext
*/
package zarnekow.goodbye.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class GoodbyeDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class LeaveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Leave");
		private final Assignment cFarewellsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFarewellsGoodbyeParserRuleCall_0 = (RuleCall)cFarewellsAssignment.eContents().get(0);
		
		//Leave:
		//	farewells+=Goodbye*;
		public ParserRule getRule() { return rule; }

		//farewells+=Goodbye*
		public Assignment getFarewellsAssignment() { return cFarewellsAssignment; }

		//Goodbye
		public RuleCall getFarewellsGoodbyeParserRuleCall_0() { return cFarewellsGoodbyeParserRuleCall_0; }
	}

	public class GoodbyeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Goodbye");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cByeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHelloAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cHelloHelloCrossReference_1_0 = (CrossReference)cHelloAssignment_1.eContents().get(0);
		private final RuleCall cHelloHelloIDTerminalRuleCall_1_0_1 = (RuleCall)cHelloHelloCrossReference_1_0.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Goodbye:
		//	"Bye" hello=[Hello] "!";
		public ParserRule getRule() { return rule; }

		//"Bye" hello=[Hello] "!"
		public Group getGroup() { return cGroup; }

		//"Bye"
		public Keyword getByeKeyword_0() { return cByeKeyword_0; }

		//hello=[Hello]
		public Assignment getHelloAssignment_1() { return cHelloAssignment_1; }

		//[Hello]
		public CrossReference getHelloHelloCrossReference_1_0() { return cHelloHelloCrossReference_1_0; }

		//ID
		public RuleCall getHelloHelloIDTerminalRuleCall_1_0_1() { return cHelloHelloIDTerminalRuleCall_1_0_1; }

		//"!"
		public Keyword getExclamationMarkKeyword_2() { return cExclamationMarkKeyword_2; }
	}
	
	
	private final LeaveElements pLeave;
	private final GoodbyeElements pGoodbye;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GoodbyeDSLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pLeave = new LeaveElements();
		this.pGoodbye = new GoodbyeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("zarnekow.goodbye.GoodbyeDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Leave:
	//	farewells+=Goodbye*;
	public LeaveElements getLeaveAccess() {
		return pLeave;
	}
	
	public ParserRule getLeaveRule() {
		return getLeaveAccess().getRule();
	}

	//Goodbye:
	//	"Bye" hello=[Hello] "!";
	public GoodbyeElements getGoodbyeAccess() {
		return pGoodbye;
	}
	
	public ParserRule getGoodbyeRule() {
		return getGoodbyeAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
