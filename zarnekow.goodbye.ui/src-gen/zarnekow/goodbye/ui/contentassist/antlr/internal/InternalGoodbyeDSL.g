/*
* generated by Xtext
*/
grammar InternalGoodbyeDSL;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package zarnekow.goodbye.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package zarnekow.goodbye.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import zarnekow.goodbye.services.GoodbyeDSLGrammarAccess;

}

@parser::members {
 
 	private GoodbyeDSLGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(GoodbyeDSLGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleLeave
entryRuleLeave 
:
{ before(grammarAccess.getLeaveRule()); }
	 ruleLeave
{ after(grammarAccess.getLeaveRule()); } 
	 EOF 
;

// Rule Leave
ruleLeave
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLeaveAccess().getFarewellsAssignment()); }
(rule__Leave__FarewellsAssignment)*
{ after(grammarAccess.getLeaveAccess().getFarewellsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGoodbye
entryRuleGoodbye 
:
{ before(grammarAccess.getGoodbyeRule()); }
	 ruleGoodbye
{ after(grammarAccess.getGoodbyeRule()); } 
	 EOF 
;

// Rule Goodbye
ruleGoodbye
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGoodbyeAccess().getGroup()); }
(rule__Goodbye__Group__0)
{ after(grammarAccess.getGoodbyeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Goodbye__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Goodbye__Group__0__Impl
	rule__Goodbye__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Goodbye__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoodbyeAccess().getByeKeyword_0()); }

	'Bye' 

{ after(grammarAccess.getGoodbyeAccess().getByeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Goodbye__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Goodbye__Group__1__Impl
	rule__Goodbye__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Goodbye__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoodbyeAccess().getHelloAssignment_1()); }
(rule__Goodbye__HelloAssignment_1)
{ after(grammarAccess.getGoodbyeAccess().getHelloAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Goodbye__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Goodbye__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Goodbye__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoodbyeAccess().getExclamationMarkKeyword_2()); }

	'!' 

{ after(grammarAccess.getGoodbyeAccess().getExclamationMarkKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Leave__FarewellsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLeaveAccess().getFarewellsGoodbyeParserRuleCall_0()); }
	ruleGoodbye{ after(grammarAccess.getLeaveAccess().getFarewellsGoodbyeParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Goodbye__HelloAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoodbyeAccess().getHelloHelloCrossReference_1_0()); }
(
{ before(grammarAccess.getGoodbyeAccess().getHelloHelloIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getGoodbyeAccess().getHelloHelloIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getGoodbyeAccess().getHelloHelloCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


